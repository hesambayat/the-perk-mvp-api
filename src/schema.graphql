# import UserOrderByInput, CreditOrderByInput, CreditOrderByInput, DepartmentOrderByInput from './generated/prisma.graphql'

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    departments(query: String, first: Int, skip: Int, after: String, orderBy: DepartmentOrderByInput): [Department!]!
    credits(query: String, first: Int, skip: Int, after: String, orderBy: CreditOrderByInput): [Credit!]!
    userCredits(query: String, first: Int, skip: Int, after: String, orderBy: CreditOrderByInput): [Credit!]!
    me: User!
    credit(id: ID!): Credit!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    deleteUser: User!
    updateUser(data: CreateUserInput!): User!
    createCredit(data: CreateCreditInput!): Credit!
    deleteCredit(id: ID!): Credit!
    updateCredit(id: ID!, data: UpdateCreditInput!): Credit!
}

type Subscription {
    user: UserSubscriptionPayload
    credit: CreditSubscriptionPayload
}

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
    rule: String!
    department: DepartmentCreateOneInput
}

input DepartmentCreateOneInput {
  create: DepartmentCreateInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreateInput {
  id: ID
  name: String!
}

input DepartmentWhereUniqueInput {
  id: ID
}

input LoginUserInput {
    email: String!
    password: String!
}

input CreateCreditInput {
    title: String!
    amount: String!
    creditTo: CreditCreateOneInput!
    creditBy: CreditCreateOneInput
}

input UpdateCreditInput {
    title: String
    amount: String
    creditTo: CreditCreateOneInput
    creditBy: CreditCreateOneInput
}

input CreditCreateOneInput {
  create: CreditCreateInput
  connect: CreditWhereUniqueInput
}

type User {
    id: ID!
    name: String!
    email: String!
    password: String!
    rule: String!
    balance: Float!
    department: Department
    lastTransaction: Credit
    credits: [Credit!]
    updatedAt: String!
    createdAt: String!
}

type Credit {
    id: ID!
    title: String!
    amount: Float!
    creditTo: User!
    creditBy: User!
    updatedAt: String!
    createdAt: String!
}

type Department {
    id: ID!
    name: String!
    updatedAt: String!
    createdAt: String!
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
}

type CreditSubscriptionPayload {
    mutation: MutationType!
    node: Credit
}